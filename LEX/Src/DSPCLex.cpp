// DSPCLex.cpp: implementation of the CDSPCLex class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "..\include\TextSource.h"
#include "..\include\DSPCLex.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

/*
static int yyvstop[] = {
static struct Lex::yywork yycrank[] = {
static struct Lex::yysvf yysvec[] = {
static char yymatch[] = {
CDSPCLex::CDSPCLex(CPreProc *pPreProc) : Lex()
{
	m_pPreProc = pPreProc;
	m_yycrank = yycrank;
	m_pTop = m_yycrank+778; 
	m_yymatch = yymatch;
	m_yysvec = yysvec;
	m_pFile = NULL;
}
CDSPCLex::CDSPCLex(FILE *pf) : Lex()
{
	m_pPreProc = NULL;
	m_yycrank = yycrank;
	m_pTop = m_yycrank+778; 
	m_yymatch = yymatch;
	m_yysvec = yysvec;
	m_pFile = pf;
}

int CDSPCLex::Look()
{
	int nstr; 
	while((nstr = Lex::Look()) >= 0)
	switch(nstr)
	{
case 0: return(0); break;
case -1: break; 
default: break;
	}
	return 0;
}
static yyexca[] ={
# define YYLAST 1332
static  int yyact[]={
static  int yypact[]={
static  int yypgo[]={
static  int yyr1[]={
static  int yyr2[]={
static  int yychk[]={
static  int yydef[]={

*/

static int yyvstop[] = {
0, 92, 0, 91, 92, 0, 91, 0, 79, 92, 0, 92, 0, 85, 92,
0, 78, 92, 0, 92, 0, 73, 92, 0, 74, 92, 0, 83, 92, 0, 
82, 92, 0, 70, 92, 0, 81, 92, 0, 77, 92, 0, 84, 92, 0, 36,
41, 92, 0, 36, 41, 92, 0, 71, 92, 0, 67, 92, 0, 86, 92, 0, 
72, 92, 0, 87, 92, 0, 90, 92, 0, 33, 92, 0, 33, 92, 0, 75,
92, 0, 76, 92, 0, 88, 92, 0, 33, 92, 0, 33, 92, 0, 33, 92,
0, 33, 92, 0, 33, 92, 0, 33, 92, 0, 33, 92, 0, 33, 92, 0, 
33, 92, 0, 33, 92, 0, 33, 92, 0, 33, 92, 0, 33, 92, 0, 
33, 92, 0, 33, 92, 0, 68, 92, 0, 89, 92, 0, 69, 92, 0, 80,
92, 0, 66, 0, 42, 0, 52, 0, 61, 0, 53, 0, 50, 0, 
58, 0, 47, 0, 59, 0, 49, 0, 60, 0, 39, 0, 51, 0, 
35, 36, 41, 0, 41, 0, 41, 0, 36, 41, 0, 41, 0, 36, 41, 0, 
57, 0, 63, 0, 65, 0, 64, 0, 56, 0, 33, 0, 54, 0, 
33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 7, 33, 0, 33,
0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 15, 33, 0, 
33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 
33, 0, 33, 0, 33, 0, 33, 0, 55, 0, 62, 0, 37, 0, 
43, 0, 39, 0, 39, 40, 0, 35, 36, 41, 0, 38, 41, 0, 34, 41,
0, 45, 0, 44, 0, 48, 0, 33, 0, 33, 0, 33, 0, 33,
0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 13,
33, 0, 33, 0, 33, 0, 17, 33, 0, 33, 0, 33, 0, 33, 0, 
33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 
33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 39, 0, 39, 40,
0, 38, 0, 38, 41, 0, 34, 41, 0, 46, 0, 1, 33, 0, 33,
0, 3, 33, 0, 4, 33, 0, 33, 0, 33, 0, 33, 0, 9, 33,
0, 10, 33, 0, 33, 0, 33, 0, 14, 33, 0, 33, 0, 18, 33,
0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33,
0, 33, 0, 33, 0, 33, 0, 33, 0, 30, 33, 0, 33, 0, 
33, 0, 39, 40, 0, 38, 0, 2, 33, 0, 5, 33, 0, 33, 0, 
33, 0, 33, 0, 12, 33, 0, 33, 0, 33, 0, 33, 0, 22, 33,
0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 33, 0, 28,
33, 0, 33, 0, 33, 0, 32, 33, 0, 33, 0, 8, 33, 0, 11,
33, 0, 16, 33, 0, 33, 0, 20, 33, 0, 21, 33, 0, 23, 33, 0, 
24, 33, 0, 25, 33, 0, 26, 33, 0, 33, 0, 33, 0, 33, 0, 
33, 0, 33, 0, 27, 33, 0, 33, 0, 33, 0, 6, 33, 0, 
19,33,0, 29,33,0, 31,33,0, 0};
static struct Lex::yywork yycrank[] = {
0,0,	0,0,	1,3,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	1,4,	1,5,	
0,0,	4,5,	4,5,	4,5,	
4,5,	4,5,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	1,6,	1,7,	
4,5,	0,0,	1,8,	1,9,	
1,10,	1,11,	1,12,	1,13,	
1,14,	1,15,	1,16,	1,17,	
1,18,	1,19,	1,20,	1,20,	
1,20,	1,20,	1,20,	1,20,	
1,20,	1,20,	1,20,	1,21,	
1,22,	1,23,	1,24,	1,25,	
1,26,	6,51,	1,27,	8,55,	
9,56,	13,60,	1,27,	16,63,	
1,27,	18,68,	23,76,	23,77,	
24,78,	1,28,	14,61,	25,79,	
25,80,	28,52,	58,112,	66,113,	
76,121,	80,122,	28,82,	16,64,	
16,65,	1,27,	31,83,	9,57,	
1,29,	1,3,	1,30,	1,31,	
14,62,	82,0,	1,32,	1,33,	
1,34,	1,35,	1,36,	1,37,	
1,38,	41,101,	1,39,	31,84,	
31,85,	1,40,	46,109,	36,92,	
35,91,	36,93,	38,97,	1,41,	
1,42,	1,43,	1,44,	1,45,	
1,46,	32,86,	33,87,	36,94,	
1,47,	1,48,	1,49,	1,50,	
2,6,	40,100,	39,98,	37,95,	
2,8,	2,9,	37,96,	2,11,	
2,12,	2,13,	39,99,	2,15,	
2,16,	2,17,	2,18,	43,106,	
2,20,	2,20,	2,20,	2,20,	
2,20,	2,20,	2,20,	2,20,	
2,20,	2,21,	2,22,	2,23,	
2,24,	2,25,	2,26,	17,66,	
44,107,	17,67,	17,67,	17,67,	
17,67,	17,67,	17,67,	17,67,	
17,67,	17,67,	17,67,	2,28,	
45,108,	34,88,	83,123,	48,110,	
84,124,	54,0,	86,125,	87,126,	
34,89,	88,127,	89,128,	90,129,	
91,130,	92,131,	2,29,	34,90,	
2,30,	2,31,	42,102,	42,103,	
2,32,	2,33,	2,34,	2,35,	
2,36,	2,37,	2,38,	7,52,	
2,39,	54,52,	42,104,	2,40,	
93,132,	42,105,	59,0,	7,52,	
7,52,	2,41,	2,42,	2,43,	
2,44,	2,45,	2,46,	10,58,	
94,133,	70,117,	2,47,	2,48,	
2,49,	2,50,	95,134,	10,58,	
10,58,	96,135,	70,117,	97,136,	
99,137,	70,71,	100,139,	101,140,	
7,53,	102,142,	104,145,	59,58,	
99,138,	7,52,	48,111,	105,147,	
106,148,	7,52,	107,149,	109,153,	
101,141,	103,143,	7,52,	108,151,	
10,58,	70,117,	108,152,	104,146,	
107,150,	10,0,	124,161,	125,162,	
126,163,	10,58,	70,117,	54,52,	
127,164,	70,71,	10,58,	7,52,	
103,144,	128,165,	130,168,	7,52,	
131,169,	7,52,	129,166,	129,167,	
132,170,	133,171,	134,172,	136,173,	
137,174,	139,175,	140,176,	10,58,	
141,177,	142,178,	143,179,	10,58,	
144,180,	10,58,	7,52,	145,181,	
59,58,	19,69,	7,54,	19,70,	
19,70,	19,70,	19,70,	19,70,	
19,70,	19,70,	19,70,	19,70,	
19,70,	146,182,	10,58,	147,183,	
148,184,	149,185,	10,59,	150,186,	
19,71,	19,71,	19,71,	19,71,	
19,72,	19,71,	19,71,	19,71,	
19,71,	19,71,	19,71,	19,73,	
19,71,	19,71,	19,71,	19,71,	
19,71,	19,71,	19,71,	19,71,	
19,73,	19,71,	19,71,	19,74,	
19,71,	19,71,	151,187,	152,188,	
153,189,	163,193,	19,71,	166,194,	
19,71,	19,71,	19,71,	19,71,	
19,72,	19,71,	19,71,	19,71,	
19,71,	19,71,	19,71,	19,73,	
19,71,	19,71,	19,71,	19,71,	
19,71,	19,71,	19,71,	19,71,	
19,73,	19,71,	19,71,	19,74,	
19,71,	19,71,	20,75,	20,75,	
20,75,	20,75,	20,75,	20,75,	
20,75,	20,75,	20,75,	20,75,	
69,116,	69,116,	69,116,	69,116,	
69,116,	69,116,	69,116,	69,116,	
69,116,	69,116,	167,195,	168,196,	
171,197,	172,198,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
174,199,	176,200,	177,201,	178,202,	
179,203,	180,204,	20,71,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	181,205,	182,206,	183,207,	
184,208,	27,81,	20,71,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	27,81,	27,81,	27,81,	
27,81,	67,67,	67,67,	67,67,	
67,67,	67,67,	67,67,	67,67,	
67,67,	67,67,	67,67,	116,156,	
116,157,	155,115,	158,192,	185,209,	
186,210,	188,211,	116,157,	155,115,	
158,192,	189,212,	67,114,	67,115,	
195,213,	72,118,	196,214,	72,118,	
197,215,	67,115,	72,119,	72,119,	
72,119,	72,119,	72,119,	72,119,	
72,119,	72,119,	72,119,	72,119,	
199,216,	200,217,	201,218,	116,156,	
116,157,	155,115,	158,192,	203,219,	
204,220,	205,221,	116,157,	155,115,	
158,192,	206,222,	67,114,	67,115,	
207,223,	208,224,	210,225,	211,226,	
213,227,	67,115,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
217,228,	224,229,	225,230,	226,231,	
227,232,	228,233,	230,234,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	231,235,	0,0,	0,0,	
0,0,	71,71,	0,0,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	71,71,	71,71,	71,71,	
71,71,	74,120,	74,120,	74,120,	
74,120,	74,120,	74,120,	74,120,	
74,120,	74,120,	74,120,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	74,120,	74,120,	
74,120,	74,120,	74,120,	74,120,	
75,75,	75,75,	75,75,	75,75,	
75,75,	75,75,	75,75,	75,75,	
75,75,	75,75,	114,154,	0,0,	
114,154,	0,0,	0,0,	114,155,	
114,155,	114,155,	114,155,	114,155,	
114,155,	114,155,	114,155,	114,155,	
114,155,	0,0,	74,120,	74,120,	
74,120,	74,120,	74,120,	74,120,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
75,71,	118,158,	118,158,	118,158,	
118,158,	118,158,	118,158,	118,158,	
118,158,	118,158,	118,158,	119,119,	
119,119,	119,119,	119,119,	119,119,	
119,119,	119,119,	119,119,	119,119,	
119,119,	154,155,	154,155,	154,155,	
154,155,	154,155,	154,155,	154,155,	
154,155,	154,155,	154,155,	191,157,	
75,71,	119,159,	0,0,	0,0,	
0,0,	191,157,	0,0,	119,159,	
120,120,	120,120,	120,120,	120,120,	
120,120,	120,120,	120,120,	120,120,	
120,120,	120,120,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	120,120,	120,120,	120,120,	
120,120,	120,120,	120,120,	191,157,	
0,0,	119,159,	0,0,	0,0,	
120,160,	191,157,	0,0,	119,159,	
0,0,	156,190,	0,0,	156,190,	
0,0,	120,160,	156,191,	156,191,	
156,191,	156,191,	156,191,	156,191,	
156,191,	156,191,	156,191,	156,191,	
0,0,	120,120,	120,120,	120,120,	
120,120,	120,120,	120,120,	0,0,	
0,0,	0,0,	0,0,	0,0,	
120,160,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	120,160,	190,191,	190,191,	
190,191,	190,191,	190,191,	190,191,	
190,191,	190,191,	190,191,	190,191,	
0,0};
static struct Lex::yysvf yysvec[] = {
0,	0,	0,
yycrank+-1,	0,		0,	
yycrank+-95,	yysvec+1,	0,	
yycrank+0,	0,		yyvstop+1,
yycrank+4,	0,		yyvstop+3,
yycrank+0,	yysvec+4,	yyvstop+6,
yycrank+4,	0,		yyvstop+8,
yycrank+-198,	0,		yyvstop+11,
yycrank+6,	0,		yyvstop+13,
yycrank+30,	0,		yyvstop+16,
yycrank+-214,	0,		yyvstop+19,
yycrank+0,	0,		yyvstop+21,
yycrank+0,	0,		yyvstop+24,
yycrank+8,	0,		yyvstop+27,
yycrank+35,	0,		yyvstop+30,
yycrank+0,	0,		yyvstop+33,
yycrank+26,	0,		yyvstop+36,
yycrank+113,	0,		yyvstop+39,
yycrank+12,	0,		yyvstop+42,
yycrank+243,	0,		yyvstop+45,
yycrank+318,	yysvec+19,	yyvstop+49,
yycrank+0,	0,		yyvstop+53,
yycrank+0,	0,		yyvstop+56,
yycrank+14,	0,		yyvstop+59,
yycrank+15,	0,		yyvstop+62,
yycrank+18,	0,		yyvstop+65,
yycrank+0,	0,		yyvstop+68,
yycrank+342,	0,		yyvstop+71,
yycrank+47,	yysvec+27,	yyvstop+74,
yycrank+0,	0,		yyvstop+77,
yycrank+0,	0,		yyvstop+80,
yycrank+47,	0,		yyvstop+83,
yycrank+4,	yysvec+27,	yyvstop+86,
yycrank+8,	yysvec+27,	yyvstop+89,
yycrank+76,	yysvec+27,	yyvstop+92,
yycrank+1,	yysvec+27,	yyvstop+95,
yycrank+3,	yysvec+27,	yyvstop+98,
yycrank+23,	yysvec+27,	yyvstop+101,
yycrank+3,	yysvec+27,	yyvstop+104,
yycrank+28,	yysvec+27,	yyvstop+107,
yycrank+18,	yysvec+27,	yyvstop+110,
yycrank+4,	yysvec+27,	yyvstop+113,
yycrank+86,	yysvec+27,	yyvstop+116,
yycrank+22,	yysvec+27,	yyvstop+119,
yycrank+50,	yysvec+27,	yyvstop+122,
yycrank+61,	yysvec+27,	yyvstop+125,
yycrank+6,	yysvec+27,	yyvstop+128,
yycrank+0,	0,		yyvstop+131,
yycrank+114,	0,		yyvstop+134,
yycrank+0,	0,		yyvstop+137,
yycrank+0,	0,		yyvstop+140,
yycrank+0,	0,		yyvstop+143,
yycrank+0,	yysvec+7,	0,	
yycrank+0,	0,		yyvstop+145,
yycrank+-167,	yysvec+7,	0,	
yycrank+0,	0,		yyvstop+147,
yycrank+0,	0,		yyvstop+149,
yycrank+0,	0,		yyvstop+151,
yycrank+-43,	yysvec+10,	0,	
yycrank+-196,	yysvec+10,	0,	
yycrank+0,	0,		yyvstop+153,
yycrank+0,	0,		yyvstop+155,
yycrank+0,	0,		yyvstop+157,
yycrank+0,	0,		yyvstop+159,
yycrank+0,	0,		yyvstop+161,
yycrank+0,	0,		yyvstop+163,
yycrank+37,	0,		0,	
yycrank+417,	0,		yyvstop+165,
yycrank+0,	0,		yyvstop+167,
yycrank+328,	0,		0,	
yycrank+141,	yysvec+19,	yyvstop+169,
yycrank+478,	0,		yyvstop+173,
yycrank+446,	yysvec+71,	yyvstop+175,
yycrank+0,	yysvec+71,	yyvstop+177,
yycrank+553,	yysvec+71,	yyvstop+180,
yycrank+576,	yysvec+19,	yyvstop+182,
yycrank+23,	0,		yyvstop+185,
yycrank+0,	0,		yyvstop+187,
yycrank+0,	0,		yyvstop+189,
yycrank+0,	0,		yyvstop+191,
yycrank+24,	0,		yyvstop+193,
yycrank+0,	yysvec+27,	yyvstop+195,
yycrank+-58,	yysvec+10,	0,	
yycrank+113,	0,		0,	
yycrank+116,	0,		0,	
yycrank+0,	0,		yyvstop+197,
yycrank+62,	yysvec+27,	yyvstop+199,
yycrank+78,	yysvec+27,	yyvstop+201,
yycrank+66,	yysvec+27,	yyvstop+203,
yycrank+85,	yysvec+27,	yyvstop+205,
yycrank+73,	yysvec+27,	yyvstop+207,
yycrank+67,	yysvec+27,	yyvstop+209,
yycrank+70,	yysvec+27,	yyvstop+212,
yycrank+87,	yysvec+27,	yyvstop+214,
yycrank+100,	yysvec+27,	yyvstop+216,
yycrank+111,	yysvec+27,	yyvstop+218,
yycrank+111,	yysvec+27,	yyvstop+220,
yycrank+111,	yysvec+27,	yyvstop+222,
yycrank+0,	yysvec+27,	yyvstop+224,
yycrank+120,	yysvec+27,	yyvstop+227,
yycrank+120,	yysvec+27,	yyvstop+229,
yycrank+128,	yysvec+27,	yyvstop+231,
yycrank+122,	yysvec+27,	yyvstop+233,
yycrank+142,	yysvec+27,	yyvstop+235,
yycrank+137,	yysvec+27,	yyvstop+237,
yycrank+134,	yysvec+27,	yyvstop+239,
yycrank+128,	yysvec+27,	yyvstop+241,
yycrank+137,	yysvec+27,	yyvstop+243,
yycrank+142,	yysvec+27,	yyvstop+245,
yycrank+138,	yysvec+27,	yyvstop+247,
yycrank+0,	0,		yyvstop+249,
yycrank+0,	0,		yyvstop+251,
yycrank+0,	0,		yyvstop+253,
yycrank+0,	0,		yyvstop+255,
yycrank+591,	0,		0,	
yycrank+0,	0,		yyvstop+257,
yycrank+406,	yysvec+69,	yyvstop+259,
yycrank+0,	yysvec+71,	yyvstop+262,
yycrank+617,	0,		0,	
yycrank+627,	yysvec+71,	yyvstop+266,
yycrank+656,	yysvec+71,	yyvstop+269,
yycrank+0,	0,		yyvstop+272,
yycrank+0,	0,		yyvstop+274,
yycrank+0,	0,		yyvstop+276,
yycrank+193,	0,		0,	
yycrank+144,	yysvec+27,	yyvstop+278,
yycrank+159,	yysvec+27,	yyvstop+280,
yycrank+159,	yysvec+27,	yyvstop+282,
yycrank+151,	yysvec+27,	yyvstop+284,
yycrank+155,	yysvec+27,	yyvstop+286,
yycrank+168,	yysvec+27,	yyvstop+288,
yycrank+167,	yysvec+27,	yyvstop+290,
yycrank+163,	yysvec+27,	yyvstop+292,
yycrank+172,	yysvec+27,	yyvstop+294,
yycrank+177,	yysvec+27,	yyvstop+296,
yycrank+0,	yysvec+27,	yyvstop+298,
yycrank+164,	yysvec+27,	yyvstop+301,
yycrank+171,	yysvec+27,	yyvstop+303,
yycrank+0,	yysvec+27,	yyvstop+305,
yycrank+174,	yysvec+27,	yyvstop+308,
yycrank+173,	yysvec+27,	yyvstop+310,
yycrank+163,	yysvec+27,	yyvstop+312,
yycrank+167,	yysvec+27,	yyvstop+314,
yycrank+172,	yysvec+27,	yyvstop+316,
yycrank+183,	yysvec+27,	yyvstop+318,
yycrank+171,	yysvec+27,	yyvstop+320,
yycrank+184,	yysvec+27,	yyvstop+322,
yycrank+187,	yysvec+27,	yyvstop+324,
yycrank+203,	yysvec+27,	yyvstop+326,
yycrank+194,	yysvec+27,	yyvstop+328,
yycrank+202,	yysvec+27,	yyvstop+330,
yycrank+234,	yysvec+27,	yyvstop+332,
yycrank+238,	yysvec+27,	yyvstop+334,
yycrank+228,	yysvec+27,	yyvstop+336,
yycrank+637,	0,		0,	
yycrank+407,	yysvec+154,	yyvstop+338,
yycrank+694,	0,		0,	
yycrank+0,	0,		yyvstop+340,
yycrank+408,	yysvec+118,	yyvstop+343,
yycrank+0,	yysvec+71,	yyvstop+345,
yycrank+0,	yysvec+71,	yyvstop+348,
yycrank+0,	0,		yyvstop+351,
yycrank+0,	yysvec+27,	yyvstop+353,
yycrank+230,	yysvec+27,	yyvstop+356,
yycrank+0,	yysvec+27,	yyvstop+358,
yycrank+0,	yysvec+27,	yyvstop+361,
yycrank+223,	yysvec+27,	yyvstop+364,
yycrank+281,	yysvec+27,	yyvstop+366,
yycrank+279,	yysvec+27,	yyvstop+368,
yycrank+0,	yysvec+27,	yyvstop+370,
yycrank+0,	yysvec+27,	yyvstop+373,
yycrank+274,	yysvec+27,	yyvstop+376,
yycrank+273,	yysvec+27,	yyvstop+378,
yycrank+0,	yysvec+27,	yyvstop+380,
yycrank+290,	yysvec+27,	yyvstop+383,
yycrank+0,	yysvec+27,	yyvstop+385,
yycrank+286,	yysvec+27,	yyvstop+388,
yycrank+288,	yysvec+27,	yyvstop+390,
yycrank+287,	yysvec+27,	yyvstop+392,
yycrank+303,	yysvec+27,	yyvstop+394,
yycrank+294,	yysvec+27,	yyvstop+396,
yycrank+328,	yysvec+27,	yyvstop+398,
yycrank+335,	yysvec+27,	yyvstop+400,
yycrank+336,	yysvec+27,	yyvstop+402,
yycrank+336,	yysvec+27,	yyvstop+404,
yycrank+369,	yysvec+27,	yyvstop+406,
yycrank+377,	yysvec+27,	yyvstop+408,
yycrank+0,	yysvec+27,	yyvstop+410,
yycrank+365,	yysvec+27,	yyvstop+413,
yycrank+384,	yysvec+27,	yyvstop+415,
yycrank+726,	0,		0,	
yycrank+625,	yysvec+190,	yyvstop+417,
yycrank+0,	0,		yyvstop+420,
yycrank+0,	yysvec+27,	yyvstop+422,
yycrank+0,	yysvec+27,	yyvstop+425,
yycrank+378,	yysvec+27,	yyvstop+428,
yycrank+389,	yysvec+27,	yyvstop+430,
yycrank+382,	yysvec+27,	yyvstop+432,
yycrank+0,	yysvec+27,	yyvstop+434,
yycrank+403,	yysvec+27,	yyvstop+437,
yycrank+389,	yysvec+27,	yyvstop+439,
yycrank+396,	yysvec+27,	yyvstop+441,
yycrank+0,	yysvec+27,	yyvstop+443,
yycrank+411,	yysvec+27,	yyvstop+446,
yycrank+410,	yysvec+27,	yyvstop+448,
yycrank+414,	yysvec+27,	yyvstop+450,
yycrank+401,	yysvec+27,	yyvstop+452,
yycrank+416,	yysvec+27,	yyvstop+454,
yycrank+420,	yysvec+27,	yyvstop+456,
yycrank+0,	yysvec+27,	yyvstop+458,
yycrank+412,	yysvec+27,	yyvstop+461,
yycrank+418,	yysvec+27,	yyvstop+463,
yycrank+0,	yysvec+27,	yyvstop+465,
yycrank+407,	yysvec+27,	yyvstop+468,
yycrank+0,	yysvec+27,	yyvstop+470,
yycrank+0,	yysvec+27,	yyvstop+473,
yycrank+0,	yysvec+27,	yyvstop+476,
yycrank+435,	yysvec+27,	yyvstop+479,
yycrank+0,	yysvec+27,	yyvstop+481,
yycrank+0,	yysvec+27,	yyvstop+484,
yycrank+0,	yysvec+27,	yyvstop+487,
yycrank+0,	yysvec+27,	yyvstop+490,
yycrank+0,	yysvec+27,	yyvstop+493,
yycrank+0,	yysvec+27,	yyvstop+496,
yycrank+435,	yysvec+27,	yyvstop+499,
yycrank+437,	yysvec+27,	yyvstop+501,
yycrank+431,	yysvec+27,	yyvstop+503,
yycrank+439,	yysvec+27,	yyvstop+505,
yycrank+427,	yysvec+27,	yyvstop+507,
yycrank+0,	yysvec+27,	yyvstop+509,
yycrank+442,	yysvec+27,	yyvstop+512,
yycrank+468,	yysvec+27,	yyvstop+514,
yycrank+0,	yysvec+27,	yyvstop+516,
yycrank+0,	yysvec+27,	yyvstop+519,
yycrank+0,	yysvec+27,	yyvstop+522,
yycrank+0,	yysvec+27,	yyvstop+525,
0,	0,	0};
static char yymatch[] = {
  0,   1,   1,   1,   1,   1,   1,   1, 
  1,   9,  10,   9,   9,   9,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  9,   1,  34,   1,   1,   1,   1,  39, 
  1,   1,   1,  43,   1,  43,   1,   1, 
 48,  48,  48,  48,  48,  48,  48,  48, 
 48,  48,   1,   1,   1,   1,   1,   1, 
  1,  65,  65,  65,  65,  69,  65,  71, 
 71,  71,  71,  71,  71,  71,  71,  71, 
 71,  71,  71,  71,  71,  71,  71,  71, 
 88,  71,  71,   1,  92,   1,   1,  71, 
  1,  65,  65,  65,  65,  69,  65,  71, 
 71,  71,  71,  71,  71,  71,  71,  71, 
 71,  71,  71,  71,  71,  71,  71,  71, 
 88,  71,  71,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
0};
CDSPCLex::CDSPCLex(CLexFileSource * source) : Lex()
{
	Set(source);
	m_yycrank = yycrank;
	m_pTop = m_yycrank+778; 
	m_yymatch = yymatch;
	m_yysvec = yysvec;
}

int CDSPCLex::Look()
{
	int nstr; 
	while((nstr = Lex::Look()) >= 0)
	switch(nstr)
	{
case 0: return(0); break;
case 1: {return C_auto;} break;
case 2: {return C_break;} break;
case 3: {return C_case;} break;
case 4: {return C_char;} break;
case 5: {return C_const;} break;
case 6: {return C_continue;} break;
case 7: {return C_do;} break;
case 8: {return C_double;} break;
case 9: {return C_else;} break;
case 10: {return C_enum;} break;
case 11: {return C_extern;} break;
case 12: {return C_float;} break;
case 13: {return C_for;} break;
case 14: {return C_goto;} break;
case 15: {return C_if;} break;
case 16: {return C_inline;} break;
case 17: {return C_int;} break;
case 18: {return C_long;} break;
case 19: {return C_register;} break;
case 20: {return C_return;} break;
case 21: {return C_signed;} break;
case 22: {return C_short;} break;
case 23: {return C_sizeof;} break;
case 24: {return C_static;} break;
case 25: {return C_struct;} break;
case 26: {return C_switch;} break;
case 27: {return C_typedef;} break;
case 28: {return C_union;} break;
case 29: {return C_unsigned;} break;
case 30: {return C_void;} break;
case 31: {return C_volatile;} break;
case 32: {return C_while;} break;
case 33: {return CheckTypeName();} break;
case 34: {return C_INTEGER_CONSTANT;} break;
case 35: {return C_INTEGER_CONSTANT;} break;
case 36: {return C_INTEGER_CONSTANT;} break;
case 37: {return C_CHARACTER_CONSTANT;} break;
case 38: {return C_FLOAT_CONSTANT;} break;
case 39: {return C_FLOAT_CONSTANT;} break;
case 40: {return C_FLOAT_CONSTANT;} break;
case 41: {return C_ERRORID;} break;
case 42: {return C_STRING_LITERAL;} break;
case 43: {return C_ELLIPSIS;} break;
case 44: {return C_RIGHT_ASSIGN;} break;
case 45: {return C_LEFT_ASSIGN;} break;
case 46: {return C_LEFTC_ASSIGN;} break;
case 47: {return C_ADD_ASSIGN;} break;
case 48: {return C_ADDC_ASSIGN;} break;
case 49: {return C_SUB_ASSIGN;} break;
case 50: {return C_MUL_ASSIGN;} break;
case 51: {return C_DIV_ASSIGN;} break;
case 52: {return C_MOD_ASSIGN;} break;
case 53: {return C_AND_ASSING;} break;
case 54: {return C_XOR_ASSING;} break;
case 55: {return C_OR_ASSING;} break;
case 56: {return C_RIGHT_OP;} break;
case 57: {return C_LEFT_OP;} break;
case 58: {return C_INC_OP;} break;
case 59: {return C_DEC_OP;} break;
case 60: {return C_PTR_OP;} break;
case 61: {return C_AND_OP;} break;
case 62: {return C_OR_OP;} break;
case 63: {return C_LE_OP;} break;
case 64: {return C_GE_OP;} break;
case 65: {return C_EQ_OP;} break;
case 66: {return C_NE_OP;} break;
case 67: {return ';';} break;
case 68: {MarchChar('{'); return '{';} break;
case 69: {MarchChar('}'); return '}';} break;
case 70: {return ',';} break;
case 71: {return ':';} break;
case 72: {return '=';} break;
case 73: {MarchChar('('); return '(';} break;
case 74: {MarchChar(')'); return ')';} break;
case 75: {MarchChar('['); return '[';} break;
case 76: {MarchChar(']'); return ']';} break;
case 77: {return '.';} break;
case 78: {return '&';} break;
case 79: {return '!';} break;
case 80: {return '~';} break;
case 81: {return '-';} break;
case 82: {return '+';} break;
case 83: {return '*';} break;
case 84: {return '/';} break;
case 85: {return '%';} break;
case 86: {return '<';} break;
case 87: {return '>';} break;
case 88: {return '^';} break;
case 89: {return '|';} break;
case 90: {return '?';} break;
case 91: {NULL;} break;
case 92: {return -1;} break;
case -1: break; 
default: break;
	}
	return 0;
}
CDSPCLex::~CDSPCLex()
{
}

static yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
-1, 44,
	59, 36,
	44, 36,
	-2, 181,
	};
# define YYLAST 1332
static  int yyact[]={
   112,   156,   257,   130,   347,   107,   239,   116,   190,   108,
   109,   301,   110,   211,   212,   151,   204,   193,   217,   218,
    38,    29,    36,   194,    38,    61,    85,    19,    20,    21,
    22,    25,    26,    23,    24,    30,    31,    18,    39,    40,
    35,    59,   213,   293,   214,    74,    36,   269,   268,   171,
    78,   149,   143,   313,   105,   205,   148,   246,   150,   246,
   142,   345,    38,   209,    36,   112,   332,   164,   192,   135,
   107,    17,   116,   298,   108,   109,   224,   110,    45,   277,
   241,    36,   232,   140,    33,   247,    68,   162,   352,    73,
    50,    85,   159,   111,   277,    29,    12,    13,    14,    15,
    16,    19,    20,    21,    22,    25,    26,    23,    24,    30,
    31,    18,    39,    40,    35,   294,   321,    55,    57,   259,
   173,   172,    46,   307,   297,   251,   163,   233,   306,    36,
   234,   161,   228,     3,   312,   127,   169,    38,   309,    36,
   245,    49,   112,   305,   346,   234,   155,   107,   233,   116,
   122,   108,   109,   123,   110,    50,    42,    71,   111,    60,
   249,   124,   160,   164,   144,   164,   331,   126,    85,    56,
   164,   117,   330,   113,   125,    58,   350,   320,   234,   164,
   260,    70,   112,    67,    75,   165,   324,   107,    77,   116,
   206,   108,   109,   273,   110,   235,    48,   225,    66,   234,
   244,   154,   219,   223,   220,   318,    75,   250,   221,   252,
    81,   348,   170,   222,   164,    38,   168,    36,   210,   322,
   191,   258,   323,     6,    82,   118,   119,   120,   121,   115,
   104,    17,    50,   101,   102,   111,    69,    37,   303,   167,
   166,    37,   195,   196,   197,   308,   263,     2,    80,    41,
   299,   311,   215,   216,    79,    29,    12,    13,    14,    15,
    16,    19,    20,    21,    22,    25,    26,    23,    24,    30,
    31,    18,    39,    40,    35,   111,    83,    84,    87,    37,
    88,    89,    90,    91,    92,    93,    94,    95,     6,    82,
   118,   119,   120,   121,   115,   104,    17,   314,   101,   102,
    98,   327,   277,   300,    36,   310,    30,    31,   237,   319,
   329,   334,   295,   333,   296,   336,    55,    76,    72,    47,
    29,    12,    13,    14,    15,    16,    19,    20,    21,    22,
    25,    26,    23,    24,    30,    31,    18,    39,    40,    35,
    86,    83,    84,    87,    37,    88,    89,    90,    91,    92,
    93,    94,    95,   234,    37,   288,   289,   133,     7,   296,
   278,   337,   338,   339,   279,    37,    82,   118,   119,   120,
   121,   115,   104,   280,   281,   101,   102,   272,   271,   233,
   300,    36,   145,   128,   133,   286,   287,   349,   282,   283,
   284,   285,   230,   351,   270,   317,   353,   114,   164,   266,
   237,   106,   198,   200,   133,   202,   134,   118,   119,   120,
   121,   115,   104,   103,   100,   101,   102,    96,    83,    84,
    87,    99,    88,    89,    90,    91,    92,    93,    94,    95,
   234,     6,    37,   137,   176,   316,   175,    29,   164,    17,
   138,   136,    62,    19,    20,    21,    22,    25,    26,    23,
    24,    30,    31,    18,    39,    40,    35,   207,   315,   275,
   238,   164,    34,    29,    12,    13,    14,    15,    16,    19,
    20,    21,    22,    25,    26,    23,    24,    30,    31,    18,
    39,    40,    35,   248,    28,    27,   157,   201,    97,     8,
   274,   226,   133,   164,   227,    43,     4,     1,   328,   208,
     0,     0,     0,     0,     0,   133,   133,   254,   255,   256,
   133,   133,   133,   133,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,     0,    17,     0,     0,   242,
   243,   262,     0,   264,     0,   133,    50,     0,     0,     0,
   207,     0,   133,     0,   207,   132,     0,     0,   133,     0,
    29,    12,    13,    14,    15,    16,    19,    20,    21,    22,
    25,    26,    23,    24,    30,    31,    18,    39,    40,    35,
     0,     0,   132,     0,   133,     0,   157,     0,   112,     0,
     0,     0,   253,   107,     0,   116,   208,   108,   109,     0,
   110,     0,     0,     0,   261,     0,    37,     0,   133,     0,
     0,     0,     0,    17,     0,   290,   291,   292,   133,     0,
     0,   267,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   133,     0,     0,     0,     0,     0,    29,    12,    13,
    14,    15,    16,    19,    20,    21,    22,    25,    26,    23,
    24,    30,    31,    18,    39,    40,    35,   304,   177,   139,
     0,     0,     0,     0,     0,     0,    17,   325,     0,   340,
   342,     0,     0,     0,     0,     0,     0,   236,   158,     6,
   335,   111,     0,     0,     0,     0,     0,    17,     0,     0,
    29,    12,    13,    14,    15,    16,    19,    20,    21,    22,
    25,    26,    23,    24,    30,    31,    18,    39,    40,    35,
     0,    29,    12,    13,    14,    15,    16,    19,    20,    21,
    22,    25,    26,    23,    24,    30,    31,    18,    39,    40,
    35,    17,     0,   132,     0,     0,     0,     0,     0,     0,
   132,   157,     0,     0,     0,     0,   132,     0,     0,     0,
     0,   344,    17,     0,     0,    29,    12,    13,    14,    15,
    16,    19,    20,    21,    22,    25,    26,    23,    24,    30,
    31,    18,    39,    40,    35,     0,    29,    12,    13,    14,
    15,    16,    19,    20,    21,    22,    25,    26,    23,    24,
    30,    31,    18,    39,    40,    35,   132,     0,   112,     0,
     0,     0,     0,   107,     0,   116,   132,   108,   109,     0,
   110,     0,   134,   118,   119,   120,   121,   115,   104,   343,
    29,   101,   102,     0,    85,     0,    19,    20,    21,    22,
    25,    26,    23,    24,    30,    31,    18,    39,    40,    35,
    29,     0,     0,     0,     0,     0,    19,    20,    21,    22,
    25,    26,    23,    24,    30,    31,    18,    39,    40,    35,
    11,     0,     0,    32,     0,     0,    44,     0,     0,     0,
     0,     0,     0,   178,   179,   180,   181,   188,   182,   183,
   189,   184,   185,   186,   187,   112,     0,     0,     0,     0,
   107,   111,   116,   341,   108,   109,   112,   110,     0,    65,
    63,   107,     0,   116,     0,   108,   109,     0,   110,     0,
   112,     0,   129,     0,     0,   107,     0,   116,     0,   108,
   109,     0,   110,     0,   112,     0,   152,     0,   129,   107,
     0,   116,   265,   108,   109,     0,   110,     0,     0,     0,
     0,     9,     0,     0,     0,   112,     0,     0,     0,     0,
   107,     0,   116,     0,   108,   109,   326,   110,     0,   112,
     0,     0,     0,     0,   107,     0,   116,     0,   108,   109,
   302,   110,     0,     0,   112,     0,     0,     0,   111,   107,
     0,   116,     0,   108,   109,   174,   110,   112,     0,   111,
     0,     0,   107,     0,   116,     0,   108,   109,     0,   110,
     0,   146,   229,   111,     0,   231,   240,     0,     0,   112,
     0,     0,     0,     0,   107,     0,   203,   111,   108,   109,
     0,   110,   134,   118,   119,   120,   121,   115,   104,     0,
     0,   101,   102,     0,   131,   158,     0,     0,   111,   112,
     0,     0,     0,     0,   107,     0,   199,     0,   108,   109,
     0,   110,   111,     0,     0,   141,     5,     5,   146,     0,
     0,     0,     0,    51,    52,    53,    54,   111,     0,     0,
     0,     0,   276,     0,     0,     0,     0,     0,     0,     0,
   111,     0,     0,     0,   146,   146,     0,     0,   146,   146,
     0,     0,     0,     0,    65,     0,     0,   231,     0,     0,
     0,     0,   111,    51,     0,    10,    51,     0,     0,   134,
   118,   119,   120,   121,   115,   104,     0,     0,   101,   102,
   134,   118,   119,   120,   121,   115,   104,     0,    51,   101,
   102,     0,   111,     0,   134,   118,   119,   120,   121,   115,
   104,   276,    64,   101,   102,   146,     0,     0,   134,   118,
   119,   120,   121,   115,   104,     0,     0,   101,   102,     0,
     0,     0,     0,     0,     0,   147,     0,   240,   153,   134,
   118,   119,   120,   121,   115,   104,     0,   146,   101,   102,
     0,     0,     0,   134,   118,   119,   120,   121,   115,   104,
     0,     0,   101,   102,     0,     0,     0,     0,   134,   118,
   119,   120,   121,   115,   104,     0,     0,   101,   102,     0,
     0,   134,   118,   119,   120,   121,   115,   104,     0,     0,
   101,   102,   147,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   134,   118,   119,   120,   121,   115,   104,
     0,     0,   101,   102,     0,     0,     0,     0,   147,   147,
     0,     0,   147,   147,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   134,   118,   119,   120,   121,   115,   104,
     0,     0,   101,   102,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   147,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   147 };
static  int yypact[]={
   175,   175,-10000000,-10000000,-10000000,    97,    63,   413,   478,   478,
   478,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,   -16,    78,   -82,   -98,     4,-10000000,   -20,-10000000,
-10000000,-10000000,-10000000,   139,    25,-10000000,-10000000,   413,-10000000,-10000000,
    32,    97,-10000000,-10000000,-10000000,    78,   931,   392,   -63,  -267,
   -67,  -242,     4,-10000000,-10000000,   160,-10000000,   -20,   902,-10000000,
-10000000,-10000000,   -33,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,    73,   944,    68,-10000000,   126,   200,   199,   176,
   109,   172,  -208,    62,    61,   916,-10000000,-10000000,   587,   -55,
   -23,   996,   996,   944,   966,  -258,-10000000,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,   -69,-10000000,-10000000,   149,   -31,-10000000,-10000000,
-10000000,-10000000,   180,  -259,   -18,  -250,   159,   166,-10000000,    25,
   -17,-10000000,-10000000,-10000000,-10000000,   156,   450,-10000000,    88,-10000000,
-10000000,    87,  -267,   542,-10000000,    22,  -267,  -267,  -242,    15,
-10000000,    24,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,   902,-10000000,
-10000000,   109,    67,   109,   944,-10000000,   944,   944,   944,  -312,
   755,    60,-10000000,-10000000,-10000000,   121,   944,-10000000,-10000000,-10000000,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,
   944,   944,   944,   881,  -209,  -210,-10000000,-10000000,-10000000,   944,
-10000000,-10000000,-10000000,   149,   944,   944,   152,   449,    39,   944,
   944,   944,   944,   944,   944,   944,   944,   944,   944,   944,
   944,   944,   944,   944,-10000000,-10000000,-10000000,  -214,  -193,-10000000,
-10000000,   108,    33,   339,   867,   522,-10000000,-10000000,    84,-10000000,
    65,   944,-10000000,-10000000,    13,-10000000,  -242,   944,     9,-10000000,
-10000000,   109,-10000000,-10000000,   417,   394,   354,   165,   755,-10000000,
-10000000,-10000000,   119,  -258,    23,-10000000,   178,-10000000,-10000000,-10000000,
   145,   -69,   -31,   944,-10000000,-10000000,    54,   262,   180,  -259,
   -18,   -18,  -250,  -250,  -250,  -250,   159,   159,   166,   166,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,    33,   853,   457,   131,
-10000000,   125,-10000000,   -27,-10000000,-10000000,    22,   944,-10000000,-10000000,
-10000000,-10000000,-10000000,   545,-10000000,   109,   109,   109,   944,   842,
   944,-10000000,-10000000,   944,-10000000,-10000000,-10000000,   -32,-10000000,   103,
-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,-10000000,  -308,-10000000,-10000000,
   170,   109,   135,-10000000,-10000000,-10000000,-10000000,   109,    29,-10000000,
   109,-10000000,-10000000,-10000000 };
static  int yypgo[]={
     0,   497,   247,   133,   496,  1045,   495,   489,   931,  1095,
   485,   484,    78,   850,     1,   417,   483,   462,    52,   164,
   382,   460,     6,     3,    51,    58,   853,    84,   442,    11,
   441,   488,   440,    83,   250,   300,   434,   421,   340,   414,
   413,   383,   190,    54,   401,   399,   173,   397,    82,   171,
   150,   153,   161,   174,   167,   135,   358,   319,   188,   318,
    89,    45,   317,    50,   254,   248,   210 };
static  int yyr1[]={
     0,     1,     1,     2,     2,     3,     3,     3,     5,     5,
     5,     5,     5,     5,     7,     7,     7,     7,     7,     7,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     9,     9,     6,     6,    12,    12,    14,    14,
    14,    16,    16,    10,    10,    10,    18,    18,    19,    20,
    20,    20,    20,    21,    21,    22,    22,    22,    11,    11,
    11,    24,    24,    25,    25,    13,    13,    26,    26,    26,
    26,    28,    28,    27,    27,    27,    27,    27,    27,    27,
    30,    30,    23,    29,    29,    32,    32,    33,    33,    33,
    15,    15,    31,    31,    38,    38,    35,    35,    35,    35,
    35,    35,    36,    36,    36,    36,    36,    36,    36,    36,
    36,    36,    36,    36,    36,    37,    37,    39,    39,    39,
    39,    39,    39,    39,    39,    40,    40,    40,    40,    40,
    40,    41,    41,    42,    42,    43,    43,    44,    44,    44,
    44,    45,    45,    34,    34,    34,    46,    46,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    49,    49,    50,
    50,    51,    51,    51,    52,    52,    52,    52,    52,    53,
    53,    53,    54,    54,    54,    55,    55,    55,    55,     4,
     4,    56,    56,    57,    57,    58,    58,    59,    59,    60,
    60,    61,    61,    61,    61,    61,    61,    62,    62,    62,
    63,    63,    64,    64,    64,    66,    66,    66,    66,    66,
    65,    65,    65,    65,    17,    17,    47,    47,    47,    47 };
static  int yyr2[]={
     0,     2,     4,     3,     3,     5,     7,     4,     3,     5,
     3,     5,     3,     5,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     7,     3,     7,     3,     7,
     9,     3,     7,    11,     9,     5,     3,     5,     7,     5,
     3,     5,     3,     3,     7,     3,     5,     7,    11,     9,
     5,     3,     7,     3,     7,     5,     3,     3,     5,     5,
     7,     3,     5,     3,     7,     9,     7,     9,     9,     7,
     3,     7,     3,     3,     7,     3,     7,     5,     5,     3,
     3,     7,     3,    11,     3,     7,     3,     5,     5,     5,
     5,     9,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     7,     3,     9,     7,
     9,     7,     7,     5,     5,     3,     3,     3,     3,     3,
     3,     3,     9,     3,     5,     3,     7,     3,     3,     3,
     7,     3,     7,     3,     3,     5,     3,     7,     7,     5,
     7,     7,     9,     5,     7,     7,     9,     3,     7,     3,
     7,     3,     7,     7,     3,     7,     7,     7,     7,     3,
     7,     7,     3,     7,     7,     3,     7,     7,     7,     7,
     5,     5,     3,     3,     5,     5,     7,     3,     5,     3,
     3,     3,     3,     3,     3,     3,     3,     7,     9,     7,
     3,     5,    11,    15,    11,     7,     5,     5,     5,     7,
    11,    15,    13,    15,     3,     3,     3,     3,     3,     3 };
static  int yychk[]={
-10000000,    -1,    -2,    -3,    -4,    -5,   256,   -56,    -7,    -8,
    -9,   -13,   289,   290,   291,   292,   293,   264,   304,   294,
   295,   296,   297,   300,   301,   298,   299,   -10,   -11,   288,
   302,   303,   -26,   -27,   -17,   307,    42,   257,    40,   305,
   306,    -2,    59,    -6,   -13,   -12,    59,   -57,   -58,    -3,
   123,    -5,    -5,    -5,    -5,   -27,    91,    40,   257,   123,
   257,   123,   -28,   -26,    -9,   -13,    59,    44,    61,   -58,
    -3,   125,   -59,   -60,   -61,    -3,   -62,   -58,   -63,   -64,
   -65,   -66,   257,   309,   310,    59,   -38,   311,   313,   314,
   315,   316,   317,   318,   319,   320,   -15,   -31,   -35,   -37,
   -39,   266,   267,   -40,   263,   -43,   -44,    38,    42,    43,
    45,   126,    33,   -46,   -47,   262,    40,   -49,   258,   259,
   260,   261,   -50,   -51,   -52,   -53,   -54,   -55,   -41,   -13,
   -23,    93,   -31,   -35,   257,   -29,   -30,    41,   -32,   257,
   -33,    -5,   123,   -18,   -19,   -20,    -8,    -9,   123,   -24,
   -25,   257,   -26,    -9,    41,   -12,   -14,   -15,   123,   125,
   -60,    58,   -23,    58,    44,    59,    40,    40,    40,   -61,
    40,   257,    59,    59,    59,   -38,   -36,    61,   276,   277,
   278,   279,   281,   282,   284,   285,   286,   287,   280,   283,
    63,   275,    91,    40,    46,   265,   266,   267,   -35,    40,
   -35,   -41,   -35,    40,   274,   124,   -42,   -38,   -20,    94,
    38,   272,   273,    60,    62,   270,   271,   268,   269,    43,
    45,    42,    47,    37,    93,    41,    41,    44,    44,   -13,
   -34,   -26,   -48,    40,    91,   -18,   125,   -19,   -21,   -22,
   -13,    58,   -20,   -20,   -24,   125,    44,    61,   -16,   -14,
   -61,    58,   -61,   -15,   -38,   -38,   -38,   314,   -63,    59,
    59,   -15,   -38,   -43,   -38,    41,   -45,   -15,   257,   257,
   -42,   -46,   -49,    41,    41,   -34,   -26,    40,   -50,   -51,
   -52,   -52,   -53,   -53,   -53,   -53,   -54,   -54,   -55,   -55,
   -41,   -41,   -41,   257,   308,   -33,   -48,    91,    40,   -34,
    41,   -29,    93,   -23,   125,    59,    44,    58,   -23,   125,
   -25,   -23,   125,    44,   -61,    41,    41,    41,    40,   -63,
    58,    93,    41,    44,    41,   -41,    93,   -23,    41,   -29,
    41,    41,    93,   -22,   -23,   125,   -14,   -61,   -61,   -61,
   -38,    41,   -38,   -31,   -15,    93,    41,   312,    41,   -61,
    41,   -61,    59,   -61 };
static  int yydef[]={
     0,    -2,     1,     3,     4,     0,     0,     0,     8,    10,
    12,   182,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,     0,    66,     0,     0,    67,    73,     0,   214,
   215,     2,     5,     0,    -2,    34,     7,     0,   180,   183,
     0,     0,     9,    11,    13,    65,     0,     0,    45,     0,
    60,     0,    68,    69,    71,     0,     6,     0,     0,   179,
   184,   185,     0,   187,   189,   190,   191,   192,   193,   194,
   195,   196,   137,     0,     0,   200,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    94,    90,   131,    92,
    96,     0,     0,     0,     0,   115,   117,   125,   126,   127,
   128,   129,   130,   135,   138,   139,     0,   146,   216,   217,
   218,   219,   157,   159,   161,   164,   169,   172,   175,    36,
     0,    76,    82,   131,   137,     0,     0,    79,    83,    80,
    85,    89,     0,     0,    46,     0,    50,    52,     0,     0,
    61,    63,    70,    72,    74,    35,    37,    38,     0,   186,
   188,     0,     0,     0,     0,   201,     0,     0,     0,     0,
     0,     0,   206,   207,   208,     0,     0,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     0,     0,     0,     0,     0,     0,   123,   124,    97,     0,
    98,    99,   100,     0,     0,     0,     0,     0,   133,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    75,    77,    78,     0,     0,    87,
    88,   143,   144,     0,     0,     0,    44,    47,     0,    53,
    55,     0,    49,    51,     0,    59,     0,     0,     0,    41,
   197,     0,   199,    95,     0,     0,     0,     0,     0,   205,
   209,    91,     0,   116,     0,   119,     0,   141,   121,   122,
     0,   136,   147,     0,   140,   134,   143,     0,   158,   160,
   162,   163,   165,   166,   167,   168,   170,   171,   173,   174,
   176,   177,   178,    81,    84,    86,   145,     0,     0,     0,
   153,     0,   149,     0,    43,    48,     0,     0,    56,    58,
    62,    64,    39,     0,   198,     0,     0,     0,     0,     0,
     0,   118,   120,     0,   101,   132,   151,     0,   155,     0,
   148,   154,   150,    54,    57,    40,    42,   202,   204,   210,
     0,     0,     0,    93,   142,   152,   156,     0,     0,   212,
     0,   203,   211,   213 };

CDSPCLALR::CDSPCLALR():LALR()
{
	m_pact = yypact;
	m_pgo = yypgo;
	m_Act = yyact;
	m_Check = yychk;
	m_Def = yydef;
	m_Exca = yyexca;
	m_yyr1 = yyr1;
	m_yyr2 = yyr2;
	m_iLength = YYLAST;
}
